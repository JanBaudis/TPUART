
TPUART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000902  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00802000  00000902  00000996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  00802034  00802034  000009ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002099  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a53  00000000  00000000  00002c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be5  00000000  00000000  000036a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  00004290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e8b  00000000  00000000  000046e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eac  00000000  00000000  0000556b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00006417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__ctors_end>
   4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
   8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
   c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  10:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  14:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  18:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  1c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  20:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  24:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  28:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  2c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  30:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  34:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  38:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  3c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  40:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  44:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  48:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  4c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  50:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  54:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  58:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  5c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  60:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  64:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_25>
  68:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_26>
  6c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  70:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_28>
  74:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__vector_29>
  78:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  7c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  80:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  84:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  88:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  8c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  90:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  94:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  98:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  9c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  a0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  a4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  a8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  ac:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  b0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  b4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  b8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  bc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  c0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  c4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  c8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  cc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  d0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  d4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  d8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  dc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  e0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  e4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  e8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  ec:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  f0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  f4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  f8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
  fc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 100:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 104:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 108:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 10c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 110:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 114:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 118:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 11c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 120:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 124:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 128:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 12c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 130:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 134:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 138:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 13c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 140:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 144:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 148:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 14c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 150:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 154:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 158:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 15c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 160:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 164:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 168:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 16c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 170:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 174:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 178:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 17c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 180:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 184:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 188:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 18c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 190:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 194:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 198:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 19c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1a0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1a4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1a8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1ac:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1b0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1b4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1b8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1bc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1c0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1c4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1c8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1cc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1d0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1d4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1d8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1dc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1e0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1e4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1e8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1ec:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1f0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1f4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
 1f8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>

000001fc <__trampolines_end>:
 1fc:	49 6e       	ori	r20, 0xE9	; 233
 1fe:	69 74       	andi	r22, 0x49	; 73
 200:	73 20       	and	r7, r3
 202:	63 6f       	ori	r22, 0xF3	; 243
 204:	6d 70       	andi	r22, 0x0D	; 13
 206:	6c 65       	ori	r22, 0x5C	; 92
 208:	74 65       	ori	r23, 0x54	; 84
 20a:	21 0a       	sbc	r2, r17
 20c:	0d 00       	.word	0x000d	; ????

0000020e <__c.4294>:
 20e:	72 65 63 65 69 76 65 5f 73 74 72 69 6e 67 5f 66     receive_string_f
 21e:	72 6f 6d 5f 75 73 61 72 74 20 61 62 6f 75 74 20     rom_usart about 
 22e:	74 6f 20 71 75 69 74 21 0a 0d 00                    to quit!...

00000239 <__c.4289>:
 239:	72 65 63 65 69 76 65 5f 73 74 72 69 6e 67 5f 66     receive_string_f
 249:	72 6f 6d 5f 75 73 61 72 74 20 65 6e 74 65 72 65     rom_usart entere
 259:	64 21 0a 0d 00                                      d!...

0000025e <__ctors_end>:
 25e:	11 24       	eor	r1, r1
 260:	1f be       	out	0x3f, r1	; 63
 262:	cf ef       	ldi	r28, 0xFF	; 255
 264:	cd bf       	out	0x3d, r28	; 61
 266:	df e2       	ldi	r29, 0x2F	; 47
 268:	de bf       	out	0x3e, r29	; 62

0000026a <__do_copy_data>:
 26a:	10 e2       	ldi	r17, 0x20	; 32
 26c:	a0 e0       	ldi	r26, 0x00	; 0
 26e:	b0 e2       	ldi	r27, 0x20	; 32
 270:	e2 e0       	ldi	r30, 0x02	; 2
 272:	f9 e0       	ldi	r31, 0x09	; 9
 274:	00 e0       	ldi	r16, 0x00	; 0
 276:	0b bf       	out	0x3b, r16	; 59
 278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x14>
 27a:	07 90       	elpm	r0, Z+
 27c:	0d 92       	st	X+, r0
 27e:	a4 33       	cpi	r26, 0x34	; 52
 280:	b1 07       	cpc	r27, r17
 282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0x10>

00000284 <__do_clear_bss>:
 284:	20 e2       	ldi	r18, 0x20	; 32
 286:	a4 e3       	ldi	r26, 0x34	; 52
 288:	b0 e2       	ldi	r27, 0x20	; 32
 28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
 28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
 28e:	a4 3a       	cpi	r26, 0xA4	; 164
 290:	b2 07       	cpc	r27, r18
 292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
 294:	0e 94 c6 01 	call	0x38c	; 0x38c <main>
 298:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <_exit>

0000029c <__bad_interrupt>:
 29c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a0 <CCPWrite>:
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
 2a0:	0f 93       	push	r16
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	1f 92       	push	r1
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	2f b7       	in	r18, 0x3f	; 63
 2ae:	29 83       	std	Y+1, r18	; 0x01
 2b0:	f8 94       	cli
 2b2:	1b be       	out	0x3b, r1	; 59
 2b4:	fc 01       	movw	r30, r24
 2b6:	08 ed       	ldi	r16, 0xD8	; 216
 2b8:	04 bf       	out	0x34, r16	; 52
 2ba:	60 83       	st	Z, r22
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	8f bf       	out	0x3f, r24	; 63
 2c0:	0f 90       	pop	r0
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	0f 91       	pop	r16
 2c8:	08 95       	ret

000002ca <CLKSYS_Disable>:
 2ca:	e0 e5       	ldi	r30, 0x50	; 80
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	90 81       	ld	r25, Z
 2d0:	28 2f       	mov	r18, r24
 2d2:	20 95       	com	r18
 2d4:	92 23       	and	r25, r18
 2d6:	90 83       	st	Z, r25
 2d8:	90 81       	ld	r25, Z
 2da:	89 23       	and	r24, r25
 2dc:	08 95       	ret

000002de <CLKSYS_Main_ClockSource_Select>:
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	c8 2f       	mov	r28, r24
 2e6:	00 e4       	ldi	r16, 0x40	; 64
 2e8:	10 e0       	ldi	r17, 0x00	; 0
 2ea:	f8 01       	movw	r30, r16
 2ec:	60 81       	ld	r22, Z
 2ee:	68 7f       	andi	r22, 0xF8	; 248
 2f0:	68 2b       	or	r22, r24
 2f2:	80 e4       	ldi	r24, 0x40	; 64
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <CCPWrite>
 2fa:	f8 01       	movw	r30, r16
 2fc:	80 81       	ld	r24, Z
 2fe:	8c 23       	and	r24, r28
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <CLKSYS_AutoCalibration_Enable>:
 308:	20 91 56 00 	lds	r18, 0x0056	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
 30c:	38 2f       	mov	r19, r24
 30e:	98 2f       	mov	r25, r24
 310:	90 95       	com	r25
 312:	92 23       	and	r25, r18
 314:	61 11       	cpse	r22, r1
 316:	01 c0       	rjmp	.+2      	; 0x31a <CLKSYS_AutoCalibration_Enable+0x12>
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	93 2b       	or	r25, r19
 31c:	90 93 56 00 	sts	0x0056, r25	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	31 f4       	brne	.+12     	; 0x330 <CLKSYS_AutoCalibration_Enable+0x28>
 324:	e8 e6       	ldi	r30, 0x68	; 104
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	80 83       	st	Z, r24
 32e:	08 95       	ret
 330:	86 30       	cpi	r24, 0x06	; 6
 332:	29 f4       	brne	.+10     	; 0x33e <CLKSYS_AutoCalibration_Enable+0x36>
 334:	e0 e6       	ldi	r30, 0x60	; 96
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	80 83       	st	Z, r24
 33e:	08 95       	ret

00000340 <CLKSYS_Configuration_Lock>:
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	82 e4       	ldi	r24, 0x42	; 66
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 50 01 	call	0x2a0	; 0x2a0 <CCPWrite>
 34a:	08 95       	ret

0000034c <set_clock_32MHz>:
 *  2MHz & 32kHz clocks. Eventually it Locks the current Clock config.
 *
 */
void set_clock_32MHz(void){
	
	CLKSYS_Enable(OSC_RC32KEN_bm); // Enable the 32KHz internal Clock
 34c:	e0 e5       	ldi	r30, 0x50	; 80
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	84 60       	ori	r24, 0x04	; 4
 354:	80 83       	st	Z, r24
	do {} while (CLKSYS_IsReady(OSC_RC32KRDY_bm) == 0); // wait till the Clock is ready
 356:	81 81       	ldd	r24, Z+1	; 0x01
 358:	82 ff       	sbrs	r24, 2
 35a:	fd cf       	rjmp	.-6      	; 0x356 <set_clock_32MHz+0xa>
	
	CLKSYS_AutoCalibration_Enable(OSC_RC32MCREF_gm, false); // Calibrate the 32MHz Clock
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	86 e0       	ldi	r24, 0x06	; 6
 360:	0e 94 84 01 	call	0x308	; 0x308 <CLKSYS_AutoCalibration_Enable>
	
	CLKSYS_Enable(OSC_RC32MEN_bm); // Enable the 32MHz internal Clock
 364:	e0 e5       	ldi	r30, 0x50	; 80
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	82 60       	ori	r24, 0x02	; 2
 36c:	80 83       	st	Z, r24
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0); // wait till the Clock is ready
 36e:	81 81       	ldd	r24, Z+1	; 0x01
 370:	81 ff       	sbrs	r24, 1
 372:	fd cf       	rjmp	.-6      	; 0x36e <set_clock_32MHz+0x22>
	CLKSYS_Main_ClockSource_Select(CLK_SCLKSEL_RC32M_gc); // Select the 32MHz clock
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 6f 01 	call	0x2de	; 0x2de <CLKSYS_Main_ClockSource_Select>
	
	#define F_CPU 32000000UL // Sets the F_CPU Macro to the new Clock Value
	
	CLKSYS_Disable(OSC_RC32MEN_bm); // Disable 2MHz Clock
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 65 01 	call	0x2ca	; 0x2ca <CLKSYS_Disable>
	CLKSYS_Disable(OSC_RC32KEN_bm); // Disable 32kHz Clock
 380:	84 e0       	ldi	r24, 0x04	; 4
 382:	0e 94 65 01 	call	0x2ca	; 0x2ca <CLKSYS_Disable>
	
	CLKSYS_Configuration_Lock(); // Lock the Clock Config till reset
 386:	0e 94 a0 01 	call	0x340	; 0x340 <CLKSYS_Configuration_Lock>
 38a:	08 95       	ret

0000038c <main>:
 *
 *  It calls all the fancy Functions. It does things.
 *
 */
int main(void)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	6e 97       	sbiw	r28, 0x1e	; 30
 396:	cd bf       	out	0x3d, r28	; 61
 398:	de bf       	out	0x3e, r29	; 62
	char temp = 8;
	char output[10];
	uint8_t v=2;
	uint8_t v2=1;
	
	set_clock_32MHz(); // Sets the Clock to 32MHz
 39a:	0e 94 a6 01 	call	0x34c	; 0x34c <set_clock_32MHz>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	2f e7       	ldi	r18, 0x7F	; 127
 3a0:	88 e3       	ldi	r24, 0x38	; 56
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0x18>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0x22>
 3ae:	00 00       	nop
	
	//Simple Delay cause the TPUART may need some time if both started simultaneously
	_delay_ms(200);
	usart_init_tpuart(); // Inits the USART and set it to the corresponding values to talk to the TPUART-Chip
 3b0:	0e 94 3d 02 	call	0x47a	; 0x47a <usart_init_tpuart>
	usart_init_pc(); // Inits the USART and set it to the corresponding values to talk to eg a PC - 57600 8Bit no parity 1start/stop bit
 3b4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <usart_init_pc>
	
	/* Enable global interrupts. */
	sei();
 3b8:	78 94       	sei
	
	#ifdef DEBUG
	send_string_pgm_to_usart(&USART_DATA_PC, PSTR("Inits complete!\n\r")); // Sends Debug Info to PC: Init is finished - but not sure if init was successful
 3ba:	6c ef       	ldi	r22, 0xFC	; 252
 3bc:	71 e0       	ldi	r23, 0x01	; 1
 3be:	8d e6       	ldi	r24, 0x6D	; 109
 3c0:	90 e2       	ldi	r25, 0x20	; 32
 3c2:	0e 94 95 02 	call	0x52a	; 0x52a <send_string_pgm_to_usart>
	{
		v = 'v';
		/*! Enter the "Shell"!*/
		//enter_shell();
		
		send_string_to_usart(&USART_DATA_PC, "Test!\n\r");
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	70 e2       	ldi	r23, 0x20	; 32
 3ca:	8d e6       	ldi	r24, 0x6D	; 109
 3cc:	90 e2       	ldi	r25, 0x20	; 32
 3ce:	0e 94 b1 02 	call	0x562	; 0x562 <send_string_to_usart>
 3d2:	2f e7       	ldi	r18, 0x7F	; 127
 3d4:	88 e3       	ldi	r24, 0x38	; 56
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x4c>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x56>
 3e2:	00 00       	nop
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	84 e3       	ldi	r24, 0x34	; 52
 3e8:	9c e0       	ldi	r25, 0x0C	; 12
 3ea:	21 50       	subi	r18, 0x01	; 1
 3ec:	80 40       	sbci	r24, 0x00	; 0
 3ee:	90 40       	sbci	r25, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <main+0x5e>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0x68>
 3f4:	00 00       	nop

			utoa(v2, output, 2);
			send_string_to_usart(&USART_DATA_PC, "Received Char in dem Buffer:\n\r");
			send_string_to_usart(&USART_DATA_PC, output);
			send_string_to_usart(&USART_DATA_PC, "\n\r");*/
			send_string_to_usart(&USART_DATA_PC, "value of re pre:");
 3f6:	68 e0       	ldi	r22, 0x08	; 8
 3f8:	70 e2       	ldi	r23, 0x20	; 32
 3fa:	8d e6       	ldi	r24, 0x6D	; 109
 3fc:	90 e2       	ldi	r25, 0x20	; 32
 3fe:	0e 94 b1 02 	call	0x562	; 0x562 <send_string_to_usart>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 402:	42 e0       	ldi	r20, 0x02	; 2
 404:	be 01       	movw	r22, r28
 406:	6f 5f       	subi	r22, 0xFF	; 255
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <__data_end>
 40e:	90 91 35 20 	lds	r25, 0x2035	; 0x802035 <__data_end+0x1>
 412:	0e 94 4a 04 	call	0x894	; 0x894 <__itoa_ncheck>
			itoa(blabla, output, 2);
			send_string_to_usart(&USART_DATA_PC, output);
 416:	be 01       	movw	r22, r28
 418:	6f 5f       	subi	r22, 0xFF	; 255
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	8d e6       	ldi	r24, 0x6D	; 109
 41e:	90 e2       	ldi	r25, 0x20	; 32
 420:	0e 94 b1 02 	call	0x562	; 0x562 <send_string_to_usart>
			send_string_to_usart(&USART_DATA_PC, "\n\r");
 424:	65 e0       	ldi	r22, 0x05	; 5
 426:	70 e2       	ldi	r23, 0x20	; 32
 428:	8d e6       	ldi	r24, 0x6D	; 109
 42a:	90 e2       	ldi	r25, 0x20	; 32
 42c:	0e 94 b1 02 	call	0x562	; 0x562 <send_string_to_usart>

			
			if(blabla) {
 430:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <__data_end>
 434:	90 91 35 20 	lds	r25, 0x2035	; 0x802035 <__data_end+0x1>
 438:	89 2b       	or	r24, r25
 43a:	a1 f2       	breq	.-88     	; 0x3e4 <main+0x58>
				char output2[20];
				send_string_to_usart(&USART_DATA_PC, "Ret pre\n\rAnd rec:");
 43c:	69 e1       	ldi	r22, 0x19	; 25
 43e:	70 e2       	ldi	r23, 0x20	; 32
 440:	8d e6       	ldi	r24, 0x6D	; 109
 442:	90 e2       	ldi	r25, 0x20	; 32
 444:	0e 94 b1 02 	call	0x562	; 0x562 <send_string_to_usart>
				receive_string_from_usart(&USART_DATA_PC, output2);
 448:	be 01       	movw	r22, r28
 44a:	65 5f       	subi	r22, 0xF5	; 245
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	8d e6       	ldi	r24, 0x6D	; 109
 450:	90 e2       	ldi	r25, 0x20	; 32
 452:	0e 94 c5 02 	call	0x58a	; 0x58a <receive_string_from_usart>
				/*output2[0] = receive_char_from_usart(&USART_DATA_PC);
				output2[1] = receive_char_from_usart(&USART_DATA_PC);
				output2[2] = '\0';*/
				send_string_to_usart(&USART_DATA_PC, output2);
 456:	be 01       	movw	r22, r28
 458:	65 5f       	subi	r22, 0xF5	; 245
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8d e6       	ldi	r24, 0x6D	; 109
 45e:	90 e2       	ldi	r25, 0x20	; 32
 460:	0e 94 b1 02 	call	0x562	; 0x562 <send_string_to_usart>
				send_string_to_usart(&USART_DATA_PC, "\n\r");
 464:	65 e0       	ldi	r22, 0x05	; 5
 466:	70 e2       	ldi	r23, 0x20	; 32
 468:	8d e6       	ldi	r24, 0x6D	; 109
 46a:	90 e2       	ldi	r25, 0x20	; 32
 46c:	0e 94 b1 02 	call	0x562	; 0x562 <send_string_to_usart>
				blabla = 0;
 470:	10 92 34 20 	sts	0x2034, r1	; 0x802034 <__data_end>
 474:	10 92 35 20 	sts	0x2035, r1	; 0x802035 <__data_end+0x1>
 478:	b5 cf       	rjmp	.-150    	; 0x3e4 <main+0x58>

0000047a <usart_init_tpuart>:
	#ifdef DEBUG
	send_string_pgm_to_usart(&USART_DATA_PC, PSTR("receive_char_from_usart about to quit!\n\r")); // Sends Debug Info to PC
	#endif
	
	return c;
}
 47a:	e0 e4       	ldi	r30, 0x40	; 64
 47c:	f6 e0       	ldi	r31, 0x06	; 6
 47e:	84 e0       	ldi	r24, 0x04	; 4
 480:	82 83       	std	Z+2, r24	; 0x02
 482:	88 e0       	ldi	r24, 0x08	; 8
 484:	81 83       	std	Z+1, r24	; 0x01
 486:	41 e0       	ldi	r20, 0x01	; 1
 488:	60 ea       	ldi	r22, 0xA0	; 160
 48a:	78 e0       	ldi	r23, 0x08	; 8
 48c:	86 e3       	ldi	r24, 0x36	; 54
 48e:	90 e2       	ldi	r25, 0x20	; 32
 490:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <USART_InterruptDriver_Initialize>
 494:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <USART_data_c0>
 498:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <USART_data_c0+0x1>
 49c:	83 e2       	ldi	r24, 0x23	; 35
 49e:	85 83       	std	Z+5, r24	; 0x05
 4a0:	83 81       	ldd	r24, Z+3	; 0x03
 4a2:	8f 7c       	andi	r24, 0xCF	; 207
 4a4:	80 61       	ori	r24, 0x10	; 16
 4a6:	83 83       	std	Z+3, r24	; 0x03
 4a8:	a0 ea       	ldi	r26, 0xA0	; 160
 4aa:	b8 e0       	ldi	r27, 0x08	; 8
 4ac:	83 e7       	ldi	r24, 0x73	; 115
 4ae:	16 96       	adiw	r26, 0x06	; 6
 4b0:	8c 93       	st	X, r24
 4b2:	16 97       	sbiw	r26, 0x06	; 6
 4b4:	86 ec       	ldi	r24, 0xC6	; 198
 4b6:	17 96       	adiw	r26, 0x07	; 7
 4b8:	8c 93       	st	X, r24
 4ba:	84 81       	ldd	r24, Z+4	; 0x04
 4bc:	80 61       	ori	r24, 0x10	; 16
 4be:	84 83       	std	Z+4, r24	; 0x04
 4c0:	84 81       	ldd	r24, Z+4	; 0x04
 4c2:	88 60       	ori	r24, 0x08	; 8
 4c4:	84 83       	std	Z+4, r24	; 0x04
 4c6:	e0 ea       	ldi	r30, 0xA0	; 160
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	82 81       	ldd	r24, Z+2	; 0x02
 4cc:	81 60       	ori	r24, 0x01	; 1
 4ce:	82 83       	std	Z+2, r24	; 0x02
 4d0:	08 95       	ret

000004d2 <usart_init_pc>:
 4d2:	e0 e4       	ldi	r30, 0x40	; 64
 4d4:	f6 e0       	ldi	r31, 0x06	; 6
 4d6:	80 e4       	ldi	r24, 0x40	; 64
 4d8:	82 83       	std	Z+2, r24	; 0x02
 4da:	80 e8       	ldi	r24, 0x80	; 128
 4dc:	81 83       	std	Z+1, r24	; 0x01
 4de:	41 e0       	ldi	r20, 0x01	; 1
 4e0:	60 eb       	ldi	r22, 0xB0	; 176
 4e2:	78 e0       	ldi	r23, 0x08	; 8
 4e4:	8d e6       	ldi	r24, 0x6D	; 109
 4e6:	90 e2       	ldi	r25, 0x20	; 32
 4e8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <USART_InterruptDriver_Initialize>
 4ec:	e0 91 6d 20 	lds	r30, 0x206D	; 0x80206d <USART_data_c1>
 4f0:	f0 91 6e 20 	lds	r31, 0x206E	; 0x80206e <USART_data_c1+0x1>
 4f4:	83 e0       	ldi	r24, 0x03	; 3
 4f6:	85 83       	std	Z+5, r24	; 0x05
 4f8:	83 81       	ldd	r24, Z+3	; 0x03
 4fa:	8f 7c       	andi	r24, 0xCF	; 207
 4fc:	80 61       	ori	r24, 0x10	; 16
 4fe:	83 83       	std	Z+3, r24	; 0x03
 500:	a0 eb       	ldi	r26, 0xB0	; 176
 502:	b8 e0       	ldi	r27, 0x08	; 8
 504:	87 e3       	ldi	r24, 0x37	; 55
 506:	16 96       	adiw	r26, 0x06	; 6
 508:	8c 93       	st	X, r24
 50a:	16 97       	sbiw	r26, 0x06	; 6
 50c:	84 eb       	ldi	r24, 0xB4	; 180
 50e:	17 96       	adiw	r26, 0x07	; 7
 510:	8c 93       	st	X, r24
 512:	84 81       	ldd	r24, Z+4	; 0x04
 514:	80 61       	ori	r24, 0x10	; 16
 516:	84 83       	std	Z+4, r24	; 0x04
 518:	84 81       	ldd	r24, Z+4	; 0x04
 51a:	88 60       	ori	r24, 0x08	; 8
 51c:	84 83       	std	Z+4, r24	; 0x04
 51e:	e0 ea       	ldi	r30, 0xA0	; 160
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	82 81       	ldd	r24, Z+2	; 0x02
 524:	81 60       	ori	r24, 0x01	; 1
 526:	82 83       	std	Z+2, r24	; 0x02
 528:	08 95       	ret

0000052a <send_string_pgm_to_usart>:
 52a:	ef 92       	push	r14
 52c:	ff 92       	push	r15
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	8c 01       	movw	r16, r24
 536:	e6 2e       	mov	r14, r22
 538:	f7 2e       	mov	r15, r23
 53a:	f7 01       	movw	r30, r14
 53c:	c4 91       	lpm	r28, Z
 53e:	cc 23       	and	r28, r28
 540:	51 f0       	breq	.+20     	; 0x556 <send_string_pgm_to_usart+0x2c>
 542:	6c 2f       	mov	r22, r28
 544:	c8 01       	movw	r24, r16
 546:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <USART_TXBuffer_PutByte>
 54a:	88 23       	and	r24, r24
 54c:	d1 f3       	breq	.-12     	; 0x542 <send_string_pgm_to_usart+0x18>
 54e:	ff ef       	ldi	r31, 0xFF	; 255
 550:	ef 1a       	sub	r14, r31
 552:	ff 0a       	sbc	r15, r31
 554:	f2 cf       	rjmp	.-28     	; 0x53a <send_string_pgm_to_usart+0x10>
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	08 95       	ret

00000562 <send_string_to_usart>:
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	8c 01       	movw	r16, r24
 56c:	eb 01       	movw	r28, r22
 56e:	05 c0       	rjmp	.+10     	; 0x57a <send_string_to_usart+0x18>
 570:	c8 01       	movw	r24, r16
 572:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <USART_TXBuffer_PutByte>
 576:	81 11       	cpse	r24, r1
 578:	21 96       	adiw	r28, 0x01	; 1
 57a:	68 81       	ld	r22, Y
 57c:	61 11       	cpse	r22, r1
 57e:	f8 cf       	rjmp	.-16     	; 0x570 <send_string_to_usart+0xe>
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	08 95       	ret

0000058a <receive_string_from_usart>:
 58a:	cf 92       	push	r12
 58c:	df 92       	push	r13
 58e:	ef 92       	push	r14
 590:	ff 92       	push	r15
 592:	0f 93       	push	r16
 594:	1f 93       	push	r17
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	8c 01       	movw	r16, r24
 59c:	6b 01       	movw	r12, r22
 59e:	69 e3       	ldi	r22, 0x39	; 57
 5a0:	72 e0       	ldi	r23, 0x02	; 2
 5a2:	8d e6       	ldi	r24, 0x6D	; 109
 5a4:	90 e2       	ldi	r25, 0x20	; 32
 5a6:	0e 94 95 02 	call	0x52a	; 0x52a <send_string_pgm_to_usart>
 5aa:	76 01       	movw	r14, r12
 5ac:	c0 e0       	ldi	r28, 0x00	; 0
 5ae:	d0 e0       	ldi	r29, 0x00	; 0
 5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <receive_string_from_usart+0x36>
 5b2:	c8 01       	movw	r24, r16
 5b4:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_RXBuffer_GetByte>
 5b8:	f7 01       	movw	r30, r14
 5ba:	81 93       	st	Z+, r24
 5bc:	7f 01       	movw	r14, r30
 5be:	21 96       	adiw	r28, 0x01	; 1
 5c0:	c8 01       	movw	r24, r16
 5c2:	0e 94 07 04 	call	0x80e	; 0x80e <USART_RXBufferData_Available>
 5c6:	81 11       	cpse	r24, r1
 5c8:	f4 cf       	rjmp	.-24     	; 0x5b2 <receive_string_from_usart+0x28>
 5ca:	cc 0d       	add	r28, r12
 5cc:	dd 1d       	adc	r29, r13
 5ce:	18 82       	st	Y, r1
 5d0:	b6 01       	movw	r22, r12
 5d2:	8d e6       	ldi	r24, 0x6D	; 109
 5d4:	90 e2       	ldi	r25, 0x20	; 32
 5d6:	0e 94 b1 02 	call	0x562	; 0x562 <send_string_to_usart>
 5da:	6e e0       	ldi	r22, 0x0E	; 14
 5dc:	72 e0       	ldi	r23, 0x02	; 2
 5de:	8d e6       	ldi	r24, 0x6D	; 109
 5e0:	90 e2       	ldi	r25, 0x20	; 32
 5e2:	0e 94 95 02 	call	0x52a	; 0x52a <send_string_pgm_to_usart>
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	ff 90       	pop	r15
 5f0:	ef 90       	pop	r14
 5f2:	df 90       	pop	r13
 5f4:	cf 90       	pop	r12
 5f6:	08 95       	ret

000005f8 <__vector_25>:
 *
 *	\todo Think about if volatile for the USART_DATA_TP is needed!
 *
 */
ISR(USARTC0_RXC_vect)
{
 5f8:	1f 92       	push	r1
 5fa:	0f 92       	push	r0
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	0f 92       	push	r0
 600:	11 24       	eor	r1, r1
 602:	0b b6       	in	r0, 0x3b	; 59
 604:	0f 92       	push	r0
 606:	2f 93       	push	r18
 608:	3f 93       	push	r19
 60a:	4f 93       	push	r20
 60c:	5f 93       	push	r21
 60e:	6f 93       	push	r22
 610:	7f 93       	push	r23
 612:	8f 93       	push	r24
 614:	9f 93       	push	r25
 616:	af 93       	push	r26
 618:	bf 93       	push	r27
 61a:	ef 93       	push	r30
 61c:	ff 93       	push	r31
	USART_RXComplete(&USART_DATA_TP);
 61e:	86 e3       	ldi	r24, 0x36	; 54
 620:	90 e2       	ldi	r25, 0x20	; 32
 622:	0e 94 1b 04 	call	0x836	; 0x836 <USART_RXComplete>
}
 626:	ff 91       	pop	r31
 628:	ef 91       	pop	r30
 62a:	bf 91       	pop	r27
 62c:	af 91       	pop	r26
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	7f 91       	pop	r23
 634:	6f 91       	pop	r22
 636:	5f 91       	pop	r21
 638:	4f 91       	pop	r20
 63a:	3f 91       	pop	r19
 63c:	2f 91       	pop	r18
 63e:	0f 90       	pop	r0
 640:	0b be       	out	0x3b, r0	; 59
 642:	0f 90       	pop	r0
 644:	0f be       	out	0x3f, r0	; 63
 646:	0f 90       	pop	r0
 648:	1f 90       	pop	r1
 64a:	18 95       	reti

0000064c <__vector_26>:
 *
 *	\todo Think about if volatile for the USART_DATA_TP is needed!
 *
 */
ISR(USARTC0_DRE_vect)
{
 64c:	1f 92       	push	r1
 64e:	0f 92       	push	r0
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	0f 92       	push	r0
 654:	11 24       	eor	r1, r1
 656:	0b b6       	in	r0, 0x3b	; 59
 658:	0f 92       	push	r0
 65a:	2f 93       	push	r18
 65c:	3f 93       	push	r19
 65e:	4f 93       	push	r20
 660:	5f 93       	push	r21
 662:	6f 93       	push	r22
 664:	7f 93       	push	r23
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	af 93       	push	r26
 66c:	bf 93       	push	r27
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_DATA_TP);
 672:	86 e3       	ldi	r24, 0x36	; 54
 674:	90 e2       	ldi	r25, 0x20	; 32
 676:	0e 94 30 04 	call	0x860	; 0x860 <USART_DataRegEmpty>
}
 67a:	ff 91       	pop	r31
 67c:	ef 91       	pop	r30
 67e:	bf 91       	pop	r27
 680:	af 91       	pop	r26
 682:	9f 91       	pop	r25
 684:	8f 91       	pop	r24
 686:	7f 91       	pop	r23
 688:	6f 91       	pop	r22
 68a:	5f 91       	pop	r21
 68c:	4f 91       	pop	r20
 68e:	3f 91       	pop	r19
 690:	2f 91       	pop	r18
 692:	0f 90       	pop	r0
 694:	0b be       	out	0x3b, r0	; 59
 696:	0f 90       	pop	r0
 698:	0f be       	out	0x3f, r0	; 63
 69a:	0f 90       	pop	r0
 69c:	1f 90       	pop	r1
 69e:	18 95       	reti

000006a0 <__vector_28>:
 *	\todo Think about if volatile for the USART_DATA_PC is needed!
 *	\note Added a check to see if the Return-Key was pressed to trigger the "Shell"
 *
 */
ISR(USARTC1_RXC_vect)
{
 6a0:	1f 92       	push	r1
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	0b b6       	in	r0, 0x3b	; 59
 6ac:	0f 92       	push	r0
 6ae:	2f 93       	push	r18
 6b0:	3f 93       	push	r19
 6b2:	4f 93       	push	r20
 6b4:	5f 93       	push	r21
 6b6:	6f 93       	push	r22
 6b8:	7f 93       	push	r23
 6ba:	8f 93       	push	r24
 6bc:	9f 93       	push	r25
 6be:	af 93       	push	r26
 6c0:	bf 93       	push	r27
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	cd b7       	in	r28, 0x3d	; 61
 6cc:	de b7       	in	r29, 0x3e	; 62
 6ce:	2a 97       	sbiw	r28, 0x0a	; 10
 6d0:	cd bf       	out	0x3d, r28	; 61
 6d2:	de bf       	out	0x3e, r29	; 62
	USART_RXComplete(&USART_DATA_PC);
 6d4:	8d e6       	ldi	r24, 0x6D	; 109
 6d6:	90 e2       	ldi	r25, 0x20	; 32
 6d8:	0e 94 1b 04 	call	0x836	; 0x836 <USART_RXComplete>
	
	char output[10];

	/*! If it receives the Return-Key(13) it changes */
	if (USART_data_c1.buffer.RX[(USART_data_c1.buffer.RX_Head - 1) & USART_RX_BUFFER_MASK] == 0x0D) {
 6dc:	e0 91 a0 20 	lds	r30, 0x20A0	; 0x8020a0 <USART_data_c1+0x33>
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	31 97       	sbiw	r30, 0x01	; 1
 6e4:	ef 71       	andi	r30, 0x1F	; 31
 6e6:	ff 27       	eor	r31, r31
 6e8:	e3 59       	subi	r30, 0x93	; 147
 6ea:	ff 4d       	sbci	r31, 0xDF	; 223
 6ec:	83 81       	ldd	r24, Z+3	; 0x03
 6ee:	8d 30       	cpi	r24, 0x0D	; 13
 6f0:	e9 f4       	brne	.+58     	; 0x72c <__vector_28+0x8c>
		send_string_to_usart(&USART_DATA_PC, "Enter\n\r");
 6f2:	6b e2       	ldi	r22, 0x2B	; 43
 6f4:	70 e2       	ldi	r23, 0x20	; 32
 6f6:	8d e6       	ldi	r24, 0x6D	; 109
 6f8:	90 e2       	ldi	r25, 0x20	; 32
 6fa:	0e 94 b1 02 	call	0x562	; 0x562 <send_string_to_usart>
		itoa(blabla, output, 2);
 6fe:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <__data_end>
 702:	90 91 35 20 	lds	r25, 0x2035	; 0x802035 <__data_end+0x1>
 706:	42 e0       	ldi	r20, 0x02	; 2
 708:	be 01       	movw	r22, r28
 70a:	6f 5f       	subi	r22, 0xFF	; 255
 70c:	7f 4f       	sbci	r23, 0xFF	; 255
 70e:	0e 94 4a 04 	call	0x894	; 0x894 <__itoa_ncheck>
		send_string_to_usart(&USART_DATA_PC, output);
 712:	be 01       	movw	r22, r28
 714:	6f 5f       	subi	r22, 0xFF	; 255
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8d e6       	ldi	r24, 0x6D	; 109
 71a:	90 e2       	ldi	r25, 0x20	; 32
 71c:	0e 94 b1 02 	call	0x562	; 0x562 <send_string_to_usart>
		blabla = 1;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <__data_end>
 728:	90 93 35 20 	sts	0x2035, r25	; 0x802035 <__data_end+0x1>
	}
}
 72c:	2a 96       	adiw	r28, 0x0a	; 10
 72e:	cd bf       	out	0x3d, r28	; 61
 730:	de bf       	out	0x3e, r29	; 62
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	ff 91       	pop	r31
 738:	ef 91       	pop	r30
 73a:	bf 91       	pop	r27
 73c:	af 91       	pop	r26
 73e:	9f 91       	pop	r25
 740:	8f 91       	pop	r24
 742:	7f 91       	pop	r23
 744:	6f 91       	pop	r22
 746:	5f 91       	pop	r21
 748:	4f 91       	pop	r20
 74a:	3f 91       	pop	r19
 74c:	2f 91       	pop	r18
 74e:	0f 90       	pop	r0
 750:	0b be       	out	0x3b, r0	; 59
 752:	0f 90       	pop	r0
 754:	0f be       	out	0x3f, r0	; 63
 756:	0f 90       	pop	r0
 758:	1f 90       	pop	r1
 75a:	18 95       	reti

0000075c <__vector_29>:
 *
 *	\todo Think about if volatile for the USART_DATA_PC is needed!
 *
 */
ISR(USARTC1_DRE_vect)
{
 75c:	1f 92       	push	r1
 75e:	0f 92       	push	r0
 760:	0f b6       	in	r0, 0x3f	; 63
 762:	0f 92       	push	r0
 764:	11 24       	eor	r1, r1
 766:	0b b6       	in	r0, 0x3b	; 59
 768:	0f 92       	push	r0
 76a:	2f 93       	push	r18
 76c:	3f 93       	push	r19
 76e:	4f 93       	push	r20
 770:	5f 93       	push	r21
 772:	6f 93       	push	r22
 774:	7f 93       	push	r23
 776:	8f 93       	push	r24
 778:	9f 93       	push	r25
 77a:	af 93       	push	r26
 77c:	bf 93       	push	r27
 77e:	ef 93       	push	r30
 780:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_DATA_PC);
 782:	8d e6       	ldi	r24, 0x6D	; 109
 784:	90 e2       	ldi	r25, 0x20	; 32
 786:	0e 94 30 04 	call	0x860	; 0x860 <USART_DataRegEmpty>
}
 78a:	ff 91       	pop	r31
 78c:	ef 91       	pop	r30
 78e:	bf 91       	pop	r27
 790:	af 91       	pop	r26
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	7f 91       	pop	r23
 798:	6f 91       	pop	r22
 79a:	5f 91       	pop	r21
 79c:	4f 91       	pop	r20
 79e:	3f 91       	pop	r19
 7a0:	2f 91       	pop	r18
 7a2:	0f 90       	pop	r0
 7a4:	0b be       	out	0x3b, r0	; 59
 7a6:	0f 90       	pop	r0
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	0f 90       	pop	r0
 7ac:	1f 90       	pop	r1
 7ae:	18 95       	reti

000007b0 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 7b0:	fc 01       	movw	r30, r24
 7b2:	60 83       	st	Z, r22
 7b4:	71 83       	std	Z+1, r23	; 0x01
 7b6:	42 83       	std	Z+2, r20	; 0x02
 7b8:	14 aa       	std	Z+52, r1	; 0x34
 7ba:	13 aa       	std	Z+51, r1	; 0x33
 7bc:	16 aa       	std	Z+54, r1	; 0x36
 7be:	15 aa       	std	Z+53, r1	; 0x35
 7c0:	08 95       	ret

000007c2 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 7c2:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 7c4:	95 a9       	ldd	r25, Z+53	; 0x35
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 7c6:	26 a9       	ldd	r18, Z+54	; 0x36
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 7c8:	9f 5f       	subi	r25, 0xFF	; 255
 7ca:	9f 70       	andi	r25, 0x0F	; 15
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	92 13       	cpse	r25, r18
 7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <USART_TXBuffer_FreeSpace+0x12>
 7d2:	80 e0       	ldi	r24, 0x00	; 0
}
 7d4:	08 95       	ret

000007d6 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 7d6:	1f 93       	push	r17
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	ec 01       	movw	r28, r24
 7de:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 7e0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 7e4:	88 23       	and	r24, r24
 7e6:	79 f0       	breq	.+30     	; 0x806 <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 7e8:	9d a9       	ldd	r25, Y+53	; 0x35
	  	TXbufPtr->TX[tempTX_Head]= data;
 7ea:	fe 01       	movw	r30, r28
 7ec:	e9 0f       	add	r30, r25
 7ee:	f1 1d       	adc	r31, r1
 7f0:	13 a3       	std	Z+35, r17	; 0x23
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 7f2:	9f 5f       	subi	r25, 0xFF	; 255
 7f4:	9f 70       	andi	r25, 0x0F	; 15
 7f6:	9d ab       	std	Y+53, r25	; 0x35

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 7f8:	e8 81       	ld	r30, Y
 7fa:	f9 81       	ldd	r31, Y+1	; 0x01
 7fc:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 7fe:	9c 7f       	andi	r25, 0xFC	; 252
 800:	2a 81       	ldd	r18, Y+2	; 0x02
 802:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 804:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	08 95       	ret

0000080e <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 80e:	fc 01       	movw	r30, r24
 810:	23 a9       	ldd	r18, Z+51	; 0x33
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 812:	94 a9       	ldd	r25, Z+52	; 0x34

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	29 13       	cpse	r18, r25
 818:	01 c0       	rjmp	.+2      	; 0x81c <USART_RXBufferData_Available+0xe>
 81a:	80 e0       	ldi	r24, 0x00	; 0
}
 81c:	08 95       	ret

0000081e <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 81e:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 820:	84 a9       	ldd	r24, Z+52	; 0x34
 822:	df 01       	movw	r26, r30
 824:	a8 0f       	add	r26, r24
 826:	b1 1d       	adc	r27, r1
 828:	13 96       	adiw	r26, 0x03	; 3
 82a:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 82c:	94 a9       	ldd	r25, Z+52	; 0x34
 82e:	9f 5f       	subi	r25, 0xFF	; 255
 830:	9f 71       	andi	r25, 0x1F	; 31
 832:	94 ab       	std	Z+52, r25	; 0x34

	return ans;
}
 834:	08 95       	ret

00000836 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 836:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 838:	93 a9       	ldd	r25, Z+51	; 0x33
 83a:	9f 5f       	subi	r25, 0xFF	; 255
 83c:	9f 71       	andi	r25, 0x1F	; 31

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 83e:	84 a9       	ldd	r24, Z+52	; 0x34
	uint8_t data = usart_data->usart->DATA;
 840:	a0 81       	ld	r26, Z
 842:	b1 81       	ldd	r27, Z+1	; 0x01
 844:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
 846:	98 17       	cp	r25, r24
 848:	49 f0       	breq	.+18     	; 0x85c <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 84a:	83 a9       	ldd	r24, Z+51	; 0x33
 84c:	df 01       	movw	r26, r30
 84e:	a8 0f       	add	r26, r24
 850:	b1 1d       	adc	r27, r1
 852:	13 96       	adiw	r26, 0x03	; 3
 854:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
 856:	93 ab       	std	Z+51, r25	; 0x33
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 85c:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 85e:	08 95       	ret

00000860 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 860:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 862:	86 a9       	ldd	r24, Z+54	; 0x36
	if (bufPtr->TX_Head == tempTX_Tail){
 864:	95 a9       	ldd	r25, Z+53	; 0x35
 866:	98 13       	cpse	r25, r24
 868:	07 c0       	rjmp	.+14     	; 0x878 <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 86a:	01 90       	ld	r0, Z+
 86c:	f0 81       	ld	r31, Z
 86e:	e0 2d       	mov	r30, r0
 870:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 872:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 874:	83 83       	std	Z+3, r24	; 0x03
 876:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 878:	86 a9       	ldd	r24, Z+54	; 0x36
 87a:	df 01       	movw	r26, r30
 87c:	a8 0f       	add	r26, r24
 87e:	b1 1d       	adc	r27, r1
 880:	93 96       	adiw	r26, 0x23	; 35
 882:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
 884:	a0 81       	ld	r26, Z
 886:	b1 81       	ldd	r27, Z+1	; 0x01
 888:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 88a:	86 a9       	ldd	r24, Z+54	; 0x36
 88c:	8f 5f       	subi	r24, 0xFF	; 255
 88e:	8f 70       	andi	r24, 0x0F	; 15
 890:	86 ab       	std	Z+54, r24	; 0x36
 892:	08 95       	ret

00000894 <__itoa_ncheck>:
 894:	bb 27       	eor	r27, r27
 896:	4a 30       	cpi	r20, 0x0A	; 10
 898:	31 f4       	brne	.+12     	; 0x8a6 <__itoa_ncheck+0x12>
 89a:	99 23       	and	r25, r25
 89c:	22 f4       	brpl	.+8      	; 0x8a6 <__itoa_ncheck+0x12>
 89e:	bd e2       	ldi	r27, 0x2D	; 45
 8a0:	90 95       	com	r25
 8a2:	81 95       	neg	r24
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__utoa_common>

000008aa <__utoa_ncheck>:
 8aa:	bb 27       	eor	r27, r27

000008ac <__utoa_common>:
 8ac:	fb 01       	movw	r30, r22
 8ae:	55 27       	eor	r21, r21
 8b0:	aa 27       	eor	r26, r26
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	aa 1f       	adc	r26, r26
 8b8:	a4 17       	cp	r26, r20
 8ba:	10 f0       	brcs	.+4      	; 0x8c0 <__utoa_common+0x14>
 8bc:	a4 1b       	sub	r26, r20
 8be:	83 95       	inc	r24
 8c0:	50 51       	subi	r21, 0x10	; 16
 8c2:	b9 f7       	brne	.-18     	; 0x8b2 <__utoa_common+0x6>
 8c4:	a0 5d       	subi	r26, 0xD0	; 208
 8c6:	aa 33       	cpi	r26, 0x3A	; 58
 8c8:	08 f0       	brcs	.+2      	; 0x8cc <__utoa_common+0x20>
 8ca:	a9 5d       	subi	r26, 0xD9	; 217
 8cc:	a1 93       	st	Z+, r26
 8ce:	00 97       	sbiw	r24, 0x00	; 0
 8d0:	79 f7       	brne	.-34     	; 0x8b0 <__utoa_common+0x4>
 8d2:	b1 11       	cpse	r27, r1
 8d4:	b1 93       	st	Z+, r27
 8d6:	11 92       	st	Z+, r1
 8d8:	cb 01       	movw	r24, r22
 8da:	0c 94 6f 04 	jmp	0x8de	; 0x8de <strrev>

000008de <strrev>:
 8de:	dc 01       	movw	r26, r24
 8e0:	fc 01       	movw	r30, r24
 8e2:	67 2f       	mov	r22, r23
 8e4:	71 91       	ld	r23, Z+
 8e6:	77 23       	and	r23, r23
 8e8:	e1 f7       	brne	.-8      	; 0x8e2 <strrev+0x4>
 8ea:	32 97       	sbiw	r30, 0x02	; 2
 8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <strrev+0x18>
 8ee:	7c 91       	ld	r23, X
 8f0:	6d 93       	st	X+, r22
 8f2:	70 83       	st	Z, r23
 8f4:	62 91       	ld	r22, -Z
 8f6:	ae 17       	cp	r26, r30
 8f8:	bf 07       	cpc	r27, r31
 8fa:	c8 f3       	brcs	.-14     	; 0x8ee <strrev+0x10>
 8fc:	08 95       	ret

000008fe <_exit>:
 8fe:	f8 94       	cli

00000900 <__stop_program>:
 900:	ff cf       	rjmp	.-2      	; 0x900 <__stop_program>
